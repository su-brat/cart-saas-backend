generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  fullName        String
  email           String
  phone           String
  gender          String
  dob             String
  createdAt       DateTime          @default(now())
  Order           Order[]
  ShippingAddress ShippingAddress[]
}

model Merchant {
  id             Int       @id @default(autoincrement())
  name           String
  adminId        String
  displayAddress String
  createdAt      DateTime  @default(now())
  Product        Product[]
}

model Product {
  id                      Int         @id @default(autoincrement())
  merchantId              Int
  merchant                Merchant    @relation(fields: [merchantId], references: [id])
  name                    String
  price                   Float
  availabilityStatus      String
  createdAt               DateTime    @default(now())
  restrictedShippingCodes String
  OrderItem               OrderItem[]
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  status    String
  createdAt DateTime    @default(now())
  OrderItem OrderItem[]
}

model OrderItem {
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int

  @@id([orderId, productId])
}

model ShippingAddress {
  id          Int    @id @default(autoincrement())
  userId      Int
  user        User   @relation(fields: [userId], references: [id])
  addressLine String
  pincode     String
  state       String
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

// model User {
//   id    Int     @id @default(autoincrement())
//   email String  @unique
//   name  String?
//   posts Post[]
// }

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String
//   content   String?
//   published Boolean  @default(false)
//   viewCount Int      @default(0)
//   author    User?    @relation(fields: [authorId], references: [id])
//   authorId  Int?
// }
